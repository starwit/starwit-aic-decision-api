/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.starwit;

import de.starwit.aicockpit.Decision;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-28T20:47:24.051824173+01:00[Europe/Berlin]")
@Validated
@Tag(name = "decision", description = "the decision API")
public interface DecisionApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /decision
     * create a decisions config in this system
     *
     * @param decision Decision test to be created (required)
     * @return create new decision (status code 200)
     */
    @Operation(
        operationId = "createDecision",
        description = "create a decisions config in this system",
        responses = {
            @ApiResponse(responseCode = "200", description = "create new decision")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/decision",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createDecision(
        @Parameter(name = "Decision", description = "Decision test to be created", required = true) @Valid @RequestBody Decision decision
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /decision
     * get all decisions in this system
     *
     * @return list all decisions in this system (status code 200)
     */
    @Operation(
        operationId = "getAllDecisions",
        description = "get all decisions in this system",
        responses = {
            @ApiResponse(responseCode = "200", description = "list all decisions in this system", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Decision.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decision",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Decision>> getAllDecisions(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"followingDecisions\" : [ { \"id\" : 0, \"name\" : \"NextDecision\", \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"autonomyLevel\" : \"autonomous\" }, { \"id\" : 1, \"name\" : \"AnotherDecision\", \"uuid\" : \"3fa85f64-4417-4562-b3fc-2c963f66afa6\", \"autonomyLevel\" : \"proposalOnly\" } ], \"name\" : \"name\", \"id\" : 0, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, { \"followingDecisions\" : [ { \"id\" : 0, \"name\" : \"NextDecision\", \"uuid\" : \"3fa85f64-5717-4562-b3fc-2c963f66afa6\", \"autonomyLevel\" : \"autonomous\" }, { \"id\" : 1, \"name\" : \"AnotherDecision\", \"uuid\" : \"3fa85f64-4417-4562-b3fc-2c963f66afa6\", \"autonomyLevel\" : \"proposalOnly\" } ], \"name\" : \"name\", \"id\" : 0, \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /decision/{id}
     * update a Decision
     *
     * @param id Numeric ID of decision to be updated (required)
     * @param decision Decision to be updated (required)
     * @return update a decision (status code 200)
     */
    @Operation(
        operationId = "updateDecision",
        description = "update a Decision",
        responses = {
            @ApiResponse(responseCode = "200", description = "update a decision")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/decision/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateDecision(
        @Parameter(name = "id", description = "Numeric ID of decision to be updated", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Decision", description = "Decision to be updated", required = true) @Valid @RequestBody Decision decision
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
